/******************************************************************************
 Copyright (c) 2012, Google Inc.
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
 this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice,
 this list of conditions and the following disclaimer in the documentation
 and/or other materials provided with the distribution.
 * Neither the name of Google Inc. nor the names of its contributors
 may be used to endorse or promote products derived from this software
 without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 Created by Mark Cogan on 4/19/2011.

 ******************************************************************************/

#import <Foundation/Foundation.h>

// These are all local copies of private WebKit headers (or reasonable
// facsimilies thereof) necessary to the resource delegate features
// this class uses
#import "WebView.h"
#import "UIWebDocumentView.h"
#import "WebDataSource.h"
#import "WebPreferences.h"

// A UIViewController that contains a single UIWebView which, by means of the
// private resourceLoadDelegate protocol, records the performance and HTTP
// activity of web pages. Data for a given request is accumulated in the HAR
// data format and exposed via |HARLog|
@interface InstrumentedWebViewController : UIViewController<UIWebViewDelegate> {
 @private
  NSDate *startDate_;   // start time according to UIWebView callback
  NSDate *finishDate_;  // finish time according to UIWebView callback

  BOOL trackingJSInjected_; // have we injected the javascript yet?
  BOOL trackingJSExtracted_; // have we extracted the timings yet?
  NSMutableDictionary *JSTimings_; // place to store javascript timings

  // interval between UIWebView start and finish calls
  NSTimeInterval loadTime_;
  // interval between finishDate and end of latest resource load
  NSTimeInterval postLoadTime_;

  // the HAR record we're constructing as we load resources
  NSMutableDictionary *HARLog_;

  // an array of objects which track resource timing and redirects
  NSMutableArray *resourceTracker_;

  // this lock controls access to |HARLog_| and |resourceTracker_|
  NSLock *resourceLock_;

  // Flag to indicate if we think we're done loading resources
  BOOL probabalyDone_;

  // String to use as a unique ID when injecting JavaScript
  NSString *uniqueID_;
}

// Loads |request|, accumulating a log of page activity in |resourceLog_|.
// Page loading is handled asynchonously on a new thread. Callers should call
// waitForLoad to wait until the page load is (probabaly) done.
// Some platforms annotate page loads with a run number and cache status.
// Pass nil for these parameters if they are not needed.
- (void)loadRequest:(NSURLRequest *)request
    withPageProperties:(NSDictionary*)pageProperties;

// Loads |HTML|, otherwise behaving exactly as if loadRequest: was called.
// Mostly used in unit tests.
- (void)loadHTML:(NSString *)HTML;

// Executes |javascript| on the page. This happens asynchronously, and there is
// no guarantee than |javascript| will have completed execution when this
// method returns.
- (void)executeJavascript:(NSString *)javascript;

// Waits for whatever request was requested to finish loading, then does some
// cleanup on the resource log. When this method returns, it is safe to assume
// |resourceLog_| won't change any further, and that all requests generated by
// the initial request have been completed for serveral seconds.
- (void)waitForLoad;

// Capture and return an image of the web view.
- (UIImage*)takeScreenshot;

// start time according to UIWebView callback
@property (retain) NSDate *startDate;
// finish time according to UIWebView callback
@property (retain) NSDate *finishDate;

// interval between UIWebView start and finish calls
@property (assign) NSTimeInterval loadTime;
// interval between finishDate and end of latest resource load
@property (assign) NSTimeInterval postLoadTime;

// This is for convenience; it just exposes the HAR entries array inside
// HARLog (which is frequently accessed).
@property (readonly) NSMutableArray *HAREntries;
@property (readonly) NSDictionary *HARLog;

@end


